import{_ as s,c as i,o as a,a8 as n}from"./chunks/framework.UwPfSqyn.js";const E=JSON.parse('{"title":"Hook","description":"그누보드 hook 사용법","frontmatter":{"head":[["link",{"name":"canonical","content":"https://g5guide.github.io/developers/hook.html"}]],"description":"그누보드 hook 사용법"},"headers":[],"relativePath":"developers/hook.md","filePath":"developers/hook.md","lastUpdated":1737435351000}'),p={name:"developers/hook.md"},h=n(`<h1 id="hook" tabindex="-1">Hook <a class="header-anchor" href="#hook" aria-label="Permalink to &quot;Hook&quot;">​</a></h1><p>그누보드5는 기능 확장 방법으로 Hook을 지원한다.</p><p>코드가 실행되는 중에 끼어들어 추가 동작을 실행하거나 값을 변경해주는 역할을 한다. <strong>Event</strong>와 <strong>Replace</strong> 두 가지 유형을 제공하고 둘의 방식은 같지만 Replace는 인자로 전달받은 값을 가공해서 반환하면 이후 동작에 반영된다.</p><p>Hook은 첫번째 인자에 사용되는 고유한 이름이 있으며 <code>Tag</code>로 부른다. <a href="./hook-list.html">Hook 목록</a>은 그누보드5 코어에 기본정의된 Tag 목록을 정리한 것이다.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Hook 목록은 따로 제공되고있지 않으며 그누보드 전체 파일에서 <code>run_event</code>와 <code>run_replace</code>를 검색해서 찾아볼 수 있다.</p></div><details class="details custom-block"><summary>그누보드 5.4 버전 이상에서만 지원</summary><p>Hook 기능은 2019년에 배포된 그누보드 5.4 버전부터 지원하며 이전 버전에서는 Hook을 사용할 수 없다.</p><p>그누보드 5.4 이후 버전이라도 사용하려는 Hook Tag가 추가되지 않은 버전일 수 있다.</p></details><h2 id="hook-함수에-대해서" tabindex="-1">Hook 함수에 대해서 <a class="header-anchor" href="#hook-함수에-대해서" aria-label="Permalink to &quot;Hook 함수에 대해서&quot;">​</a></h2><p>그누보드5 코어에 정의된 <a href="./hook-list.html">Hook 목록</a>의 Hook을 사용에대해 이해 하기 위해서는 자신만의 커스텀 Hook을 정의하고 사용해보면 이해하기 쉽다.</p><p>PHP Hook 시스템은 다른 여러 객체지향 프레임워크에서 지원하는 이벤트, 델리게이트를 사용한 Observer 패턴과 호환된다.</p><ul><li><code>add_</code>로 시작하는 Hook 함수호출은 이벤트 타입의 <code>변수</code>(그누보드에서는 Tag)에 콜백 핸들러(리스너)를 추가하는 즉, 구독 행위이며,</li><li><code>run_</code>으로 시작하는 함수호출은 이벤트 변수 안에 저장된 핸들러들을 <code>invoke()</code> 하는 것과 같다.</li></ul><p>다만, PHP Hook의 Tag는 변수가 아닌 단순한 문자열로써 첫번째 인자로 선언하며 전달한다.</p><p>그누보드5의 PHP Hook 함수는 <code>lib/hook.lib.php</code>에 정의되어있으며, 접미사와 접두사를 통해 서로다른 두가지 분류로 나눌 수 있다.</p><ul><li>접두사 <ul><li><code>add_</code> : Tag(첫번째 인자)에 콜백 핸들러 등록</li><li><code>run_</code> : Tag에 등록된 콜백 핸들러 실행</li></ul></li><li>접미사 <ul><li><code>_event</code> : 반환이 없는 Hook</li><li><code>_replace</code> : 반환값이 있는 Hook</li></ul></li></ul><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($tag, $func, $priority</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">G5_HOOK_DEFAULT_PRIORITY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, $args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($tag, $arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($tag, $func, $priority</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">G5_HOOK_DEFAULT_PRIORITY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, $args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run_replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($tag, $arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($tag, $func, $priority</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">G5_HOOK_DEFAULT_PRIORITY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete_replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($tag, $func, $priority</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">G5_HOOK_DEFAULT_PRIORITY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>이것들을 이용해 새로운 Hook을 추가하거나 사용 할 수 있다.</p><p>이것은 커스텀 Hook을 정의하는 사람과 그것을 사용하는 사람으로 나누어 생각해보자. 실제로 내가 정의한 Hook에 다른 플러그인 개발자가 자신의 핸들러를 등록할 수 있다.</p><h3 id="커스텀-hook-정의" tabindex="-1">커스텀 Hook 정의 <a class="header-anchor" href="#커스텀-hook-정의" aria-label="Permalink to &quot;커스텀 Hook 정의&quot;">​</a></h3><p>자신의 커스텀 Hook은 <code>run_</code>접두어를 가진 Hook 함수로 Tag를 정의하고 실행(invoke)한다.</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_saving_process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($data, $user_id) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    $context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;data&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $data,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;user_id&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $user_id,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    run_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my_before_saving&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, $context);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //do sometihg here to save data with $context</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    run_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my_after_saving&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, $context, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;additional_info&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>첫번째로는 <code>my_before_saving</code> 라는 커스텀 Tag (Hook)를 지정하고 <code>run_event</code>를 호출했다. 이것은 <code>my_before_saving</code>에 등록된 핸들러(함수)들을 실행시키겠다는 의미이며 실행될 각각의 해들러에 <code>$context</code> 를 전달한다.</p><p>커스텀 Hook의 정의와 실행은 이것으로 끝난다. 이렇게 <code>run_event</code>가 호출될 때 Tag에 등록된 핸들러가 없다면 아무일도 일어나지 않는다.</p><p><code>run_event(&#39;my_before_saving&#39;, $context);</code>는 결국 아래</p><div class="language-수도코드 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">수도코드</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>my_before_saving($context);</span></span></code></pre></div><p>처럼 여겨지고 <code>my_before_saving</code>는 함수를 담는 변수로, 등록된 모든 핸들러에 매개변수로 <code>$context</code>를 전달해 실행<code>()</code> 하는 것이다. 핸들러에 전할 인자가 여럿이라면 <code>my_after_saving</code> 의 경우처럼 매개변수를 추가하면된다.</p><h3 id="커스텀-hook에-핸들러-등록" tabindex="-1">커스텀 Hook에 핸들러 등록 <a class="header-anchor" href="#커스텀-hook에-핸들러-등록" aria-label="Permalink to &quot;커스텀 Hook에 핸들러 등록&quot;">​</a></h3><p>위에 정의한 <code>run_event</code>가 <code>my_before_saving</code> Tag를 실행시킬 때 실제로 실행될 핸들러 함수는 <code>add_</code>로 등록한다.</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`add_event(\`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">my_before_saving</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`, \`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">your_func</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">function your_func(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$your_context</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //do something</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span></code></pre></div><p>이것은 아래와 같은 의미로 생각하면된다.</p><div class="language-수도코드 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">수도코드</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$my_before_saving += your_func;</span></span></code></pre></div><p><code>$your_func</code>는 Hook을 사용하려는 자의 커스텀 핸들러 함수이다. 앞서 <code>my_before_saving</code> 태그를 정의한 예제에서 <code>run_even</code>가 실행될 때 <code>$context</code>가 <code>your_func</code>의 매개변수 <code>$your_context</code>에 전달되므로 보통은 매개변수 이름을 같게 짓는다. 그리고 위 예제상 전달받은 데이터는 다음배열이 되겠다:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[</span></span>
<span class="line"><span>    &#39;data&#39; =&gt; $data,</span></span>
<span class="line"><span>    &#39;user_id&#39; =&gt; $user_id,</span></span>
<span class="line"><span>];</span></span></code></pre></div><p>위의 <code>add_event</code>와 <code>your_func</code> 핸들러 함수를 다시 작성 해보았다:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my_before_saving&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;your_func&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> your_func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($context) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    $context[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> strtoupper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($context[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이렇게 <code>run_event</code>로 Tag를 실행할때 실행될 핸들러로 <code>your_func</code> 함수를를 등록했다.</p><p>이렇게 실행될 핸들러는 반드시 함수 구현체가 있어야하는 것은 아니다. 간단한 동작이라면 <code>add_event</code>의 매개변수를 익명함수로 직접 작성해도된다.</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my_before_saving&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($context) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               $context[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> strtoupper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($context[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         );</span></span></code></pre></div><h2 id="hook-사용하기-리스너-등록" tabindex="-1">Hook 사용하기 (리스너 등록) <a class="header-anchor" href="#hook-사용하기-리스너-등록" aria-label="Permalink to &quot;Hook 사용하기 (리스너 등록)&quot;">​</a></h2><p>Hook이 동작할 때 실행될 함수(콜백, Listener)를 등록해두면 해당 이벤트가 발생할 때 등록한 함수를 호출하여 실행한다.</p><p>Hook 유형에 따라 <code>add_event()</code>와 <code>add_replace()</code> 두 가지 함수를 사용하고, <code>add_replace()</code>는 반환하는 값이 결과에 반영된다는 것 외에는 같다.</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Event Hook 리스너 등록</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> $tag Hook 이름</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> callable</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> $callback 실행될 함수, 메소드, 클래스</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> $priority 실행 우선 순위</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *            기본 값인 G5_HOOK_DEFAULT_PRIORITY는 int(8)이다</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> $args 콜백에 전달될 인자의 갯수</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($tag, $callback, $priority </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> G5_HOOK_DEFAULT_PRIORITY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, $args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Replace Hook 리스너 등록</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> $tag Hook 이름</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> callable</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> $callback 실행될 함수, 메소드, 클래스</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> $priority 실행 우선 순위</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *            기본 값인 G5_HOOK_DEFAULT_PRIORITY는 int(8)이다</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> $args 콜백에 전달될 인자의 갯수</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($tag, $callback, $priority </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> G5_HOOK_DEFAULT_PRIORITY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, $args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>네 번째 인자의 갯수 설정에 유의하자.</p><p>어떤 Hook은 인자로 아무것도 전달해주지 않을 수 있지만 동작에 필요한 데이터를 전달해주기도 한다. 사용하려는 Hook에서 전달하는 인자의 갯수를 확인하여 네번째 인자에 갯수를 지정해야 활용할 수 있다.</p></div><h3 id="함수를-리스너로-등록" tabindex="-1">함수를 리스너로 등록 <a class="header-anchor" href="#함수를-리스너로-등록" aria-label="Permalink to &quot;함수를 리스너로 등록&quot;">​</a></h3><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 두 번째 인자에 실행할 함수명을 문자열로 지정</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;common_header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;listenerCommonHeader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listenerCommonHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... 실행할 코드</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Event Hook은 결과를 반환하지 않아도 된다</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="메소드를-리스너로-등록" tabindex="-1">메소드를 리스너로 등록 <a class="header-anchor" href="#메소드를-리스너로-등록" aria-label="Permalink to &quot;메소드를 리스너로 등록&quot;">​</a></h3><p>메소드를 리스너로 등록할 때는 해당 메소드가 포함된 Class가 <code>getInstance()</code> 정적 메소드(static)를 포함해야한다. Hook은 <code>getInstance()</code>를 실행하여 객체를 반환받아 지정한 메소드를 실행한다.</p><details class="details custom-block"><summary>getInstance()</summary><p>보통 Singleton 클래스를 작성하는 방법으로 <code>getInstance</code> 이름을 사용하여 클래스 자신의 인스턴스를 생성하여 반환한다.</p></details><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 리스너 등록</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line highlighted"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;board_content_head&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyHookListenerClass&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;listenerBoardContentHead&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    G5_HOOK_DEFAULT_PRIORITY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    1</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyHookListenerClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $instance;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> self</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!self::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$instance) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            self::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> self::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$instance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 실행될 메소드</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listenerBoardContentHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($arg1)</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ... 실행할 코드</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $arg1;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>그누보드 5.5.8.3.2 버전<sup>2023.07.17 배포</sup>부터는 Closure 및 <code>ClassName::staticMethod</code> 형태의 문자열을 사용할 수 있다.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Hook이 실행될 때 마다 리스너로 등록한 메소드가 포함된 클래스의 <code>getInstance()</code>를 호출한다.</p><p><code>getInstance()</code> 메소드가 없다면 Hook이 실행되면서 매번 새로운 인스턴스를 만든다. 2개 이상의 인스턴스가 생성될 수 있으며 다중 인스턴스로 인한 사이드 이펙트에 주의해야한다. Hook 리스너를 모아둔 개별 클래스를 따로 두는 것도 좋다.</p></div><h2 id="새로운-hook-추가" tabindex="-1">새로운 Hook 추가 <a class="header-anchor" href="#새로운-hook-추가" aria-label="Permalink to &quot;새로운 Hook 추가&quot;">​</a></h2><p>자신이 만든 기능에 새로운 Hook을 정의할 수 있다.</p><p>그누보드 코드를 수정해야할 필요가 있을 때에도 새로운 Hook을 추가하여 코드 수정을 최소화하고 기능을 확장하는데 사용할 수도 있다.</p><details class="details custom-block"><summary>Hook 추가를 제안 해보자</summary><p>새로 추가한 Hook이 다른 사람에게도 유용할 것 같다면 그누보드에 Hook을 추가할 것을 제안할 수도 있다.</p><p>제안하기: <a href="https://github.com/gnuboard/gnuboard5/issues" target="_blank" rel="noreferrer">https://github.com/gnuboard/gnuboard5/issues</a></p></details><p>Hook을 사용할 때와 마찬가지로 Event/Replace 두 유형을 사용할 수 있고 차이점도 같다.</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Event Hook을 실행</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> $tag Hook 이름</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?mixed</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> $arg 리스너에 전달될 데이터</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?mixed</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> ...$args 리스너에 추가로 전달될 데이터</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *                        리스너에서 참고할 수 있는 부가 데이터를 전달할 수 있다</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($tag, $arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$args);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Replace Hook을 실행</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> $tag Hook 이름</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?mixed</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> $arg 리스너에 전달될 데이터</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *               리스너가 아무것도 반환하지 않는다면 이 인자의 값을 그대로 반환한다</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?mixed</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> ...$args 리스너에 추가로 전달될 데이터</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *                        리스너에서 참고할 수 있는 부가 데이터를 전달할 수 있다</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> mixed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run_replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($tag, $arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$args);</span></span></code></pre></div><p>아래와 같이 활용할 수 있다.</p><p>Replace Hook은 리스너에서 반환하는 값을 받아 이후 코드 실행에서 사용하도록 한다.</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Event Hook 실행</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default_data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mb_id&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;admin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bo_table&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;free&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my_first_event_hook&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, $data, $options);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Replace Hook 실행</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 리스너가 없거나 아무것도 반환하지 않는다면 $data에는 &#39;default_data&#39;가 그대로 들어있다</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;default_data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my_first_replace_hook&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, $data);</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>그누보드는 DB 트랜젝션을 이용하지 않으므로 Hook 리스너에서는 오류 등으로 의도하지 않게 동작이 멈추지 않도록 주의해야 한다.</p></div>`,59),l=[h];function k(t,e,d,r,o,g){return a(),i("div",null,l)}const y=s(p,[["render",k]]);export{E as __pageData,y as default};
